// Fibonacci Series using Itarative approach
#include <iostream>
using namespace std;

void generateFibonacci(int n)
{
    long long int fib[n]; // We use long long int to handle larger Fibonacci numbers.

    fib[0] = 0;
    fib[1] = 1;

    // Generating the Fibonacci series
    for (int i = 2; i < n; i++)
    {
        fib[i] = fib[i - 1] + fib[i - 2];
    }

    cout << "Fibonacci Series up to " << n << " terms: ";
    for (int i = 0; i < n; i++)
    {
        cout << fib[i] << " ";
    }

    cout << endl;
}

int main()
{
    int n;
    cout << "Enter the number of terms you want in the Fibonacci series: ";
    cin >> n;

    generateFibonacci(n);
    return 0;
}
 //recursie approach

#include <iostream>
using namespace std;

// Function to calculate the nth Fibonacci number recursively
long long int fibonacci(int n)
{
    if (n <= 1)
    {
        return n;
    }
    else
    {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

int main()
{
    int n;
    cout << "Enter the number of terms you want in the Fibonacci series: ";
    cin >> n;

    cout << "Fibonacci Series up to " << n << " terms: ";

    for (int i = 0; i < n; i++)
    {
        cout << fibonacci(i) << " ";
    }

    cout << endl;
    return 0;
}